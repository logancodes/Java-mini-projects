/*
  ID: v00810681 Ushanth Loganathan
  Program name: Bejeweled
  Program description: this is a game that get user input to make moves within characters and swifts characters and if three characters in
  a row are same they get removed and the game get updated with new charcters on top whereas charcters above the same characters get replaced
  by ones above it.
  Program input: It the row number column number and the move input by the user
  Program output: if charcters are same they get removed and new charcters fall in the very top row
*/
import java.util.*;
public class Bejeweled{
	public static void main(String []args){
		System.out.println("How to play: type a row and column index, followed by");
		System.out.println("the direction to move it: u (up), r (right), d (down), l (left)");
		Scanner console=new Scanner(System.in);
		char[] options={'*','$','@','+','!','&'};
		char[][]grid=new char[8][8];
		populateRandom(grid,options);//creates grid with random characters
		drawGrid(grid);//draw the grid
		String cmd;
		int row;
		int col;
		while(true){
			System.out.println("Enter <row> <column> <direction to move>, or q to quit");
			cmd=console.next();
			if(cmd.equals("q")){//user input q for "Quiting the game"
				System.exit(-1);
			}
			row=Integer.parseInt(cmd)-1;
			col=console.nextInt()-1;
			cmd=console.next();
			System.out.println("You typed: "+(row+1)+" "+(col+1)+" "+cmd);
			if(isWithinGrid(row,col,cmd,grid)){//this gets executed only if the IsWithinGrid is true
				swap(row,col,cmd,grid);
				updateGrid(grid,options);
				drawGrid(grid);
			}
		}	
	}
	/*
	purpose: to create random characters in the grid
	output: it output the grid with random characters
	*/
	public static void populateRandom(char[][] grid, char[] options){
		Random random=new Random();
		for(int c=0; c<grid.length; c++){//row
			for(int r=0;r<grid[c].length;r++){//col
				grid[c][r]=options[random.nextInt(options.length)];
			}
		}
	}
	/*
	purpose: draws the grid after its been generated by the populaterandom method
	output: draw the grid
	*/
	public static void drawGrid(char[][] grid) {
		System.out.print("      ");
		for(int l=0;l<grid.length;l++){
			int colnum=l+1;
			System.out.print(colnum+"     ");
		}
		System.out.println();
		for(int i=0;i<grid.length;i++){
			int rownum=i+1;
			System.out.print(rownum+"     ");
			for(int j=0;j<grid[i].length;j++){
				System.out.print(grid[i][j]+"     ");
			}
			System.out.println();
		}
	}
	/*
	purpose:checks weather the move is within the grid
	output:prompt user its and invalid command or invalid move
	*/
	public static boolean isWithinGrid(int row, int col, String cmd,char[][] grid){
		char temp;
		try {
			if(cmd.equals("u")){
				temp = grid[row-1][col];
			}
			else if(cmd.equals("d")){
				temp = grid[row+1][col];
			}
			else if(cmd.equals("l")){
				temp = grid[row][col-1];
			}
			else if(cmd.equals("r")){
				temp = grid[row][col+1];
			}
			else{
				System.out.println("Invalid command");
				return false;
			}
		}
		catch(IndexOutOfBoundsException e){
			System.out.println("Invalid move");
			return false;
		}
		return true;
	}
	/*
	purpose:It swaps the row and column once according to user input
	output: swaps the row and the column
	*/
	public static void swap(int row, int col, String cmd, char[][] grid){
		char x=grid[row][col];
		if(cmd.equals("d")){
			grid[row][col]=grid[row+1][col];
			grid[row+1][col]=x;
		}
		else if(cmd.equals("u")){
			grid[row][col]=grid[row-1][col];
			grid[row-1][col]=x;
		}
		else if(cmd.equals("r")){
			grid[row][col]=grid[row][col+1];
			grid[row][col+1]=x;
		}
		else if(cmd.equals("l")){
			grid[row][col]=grid[row][col-1];
			grid[row][col-1]=x;
		}
	}
	/*
	purpose:
	this method checks for any three characters that are same.
	if they are same they will be replaced by characters just above it and this happens upto row number one.
	
	this method updates the grid with random characters in the very first row.
	
	output:the grid gets updated with charcters that is placed just above it and then it works till the first row and then get updated
	with random characters
	*/
	public static boolean updateGrid(char[][] grid, char[] options){
		Random random=new Random();
		for(int r=0; r<grid.length; r++){//the row gets incremented i.e checks for each row one after the other
			for(int c=0;c<grid.length-2;c++){ //the col gets incremented i.e checks for each column one after the other
				if(grid[r][c]==grid[r][c+1]&&grid[r][c]==grid[r][c+2]){
					System.out.println("Found the match");
					System.out.println("row: "+r+" col: "+c);
					for(int i=r;i>0;i--){//brings the characters above it down
						grid[i][c]=grid[i-1][c];
						grid[i][c+1]=grid[i-1][c+1];
						grid[i][c+2]=grid[i-1][c+2];
					}
					//generates random chars
					grid[0][c]=options[random.nextInt(options.length)];
					grid[0][c+1]=options[random.nextInt(options.length)];
					grid[0][c+2]=options[random.nextInt(options.length)];
				}
			}
		}
		return true;
	}
}
	
		
